# Copyright (c) 2022-2023 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/config/components/idl_tool/idl.gni")
import("//build/ohos.gni")
import("../../../soc_perf.gni")

idl_gen_interface("socperf_client_interface") {
  src_idl = rebase_path("ISocPerf.idl")
  log_domainid = "0xD001703"
  log_tag = "SOCPERF"
}

config("socperf_client_public_config") {
  include_dirs = [
    "include",
    "{target_gen_dir}",
    "${socperf_common}/include",
  ]
}

ohos_shared_library("socperf_client") {
  output_values = get_target_outputs(":socperf_client_interface")
  sources = [ "src/socperf_client.cpp" ]
  sources += filter_inclue(output_values, [ "*_proxy.cpp" ])

  public_configs = [ ":socperf_client_public_config" ]
  deps = [":socperf_client_interface"]

  external_deps = [
    "c_utils:utils",
    "hilog:libhilog",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
  ]

  public_external_deps = [ "ipc:ipc_single" ]

  innerapi_tags = [
    "platformsdk",
    "chipsetsdk",
  ]
  version_script = "libsocperf_client.versionscript"
  part_name = "soc_perf"
  subsystem_name = "resourceschedule"
  branch_protector_ret = "pac_ret"

  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }

  asmflags = [ "-Wl,-z,relro,-z,now" ]

  cflags_cc = [ "-fstack-protector-strong" ]
}

ohos_source_set("socperf_stub") {
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }

  public_configs = [ ":socperf_client_public_config" ]
  output_values = get_target_outputs(":socperf_client_interface")
  sources = filter_inclue(output_values, [ "*_stub.cpp" ])
  deps = [":socperf_client_interface"]

  external_deps = [
    "c_utils:utils",
    "hilog:libhilog",
    "samgr:samgr_proxy",
  ]

  public_external_deps = [ "ipc:ipc_single" ]
  subsystem_name = "resourceschedule"
  part_name = "soc_perf"
}
	enum class ISocPerfIpcCode {
    COMMAND_PERF_REQUEST = MIN_TRANSACTION_ID,
    COMMAND_PERF_REQUEST_EX,
    COMMAND_SET_REQUEST_STATUS,
    COMMAND_SET_THERMAL_LEVEL,
    COMMAND_POWER_LIMIT_BOOST,
    COMMAND_REQUEST_DEVICE_MODE,
    COMMAND_REQUEST_CMD_ID_COUNT,
    COMMAND_THERMAL_LIMIT_BOOST,
    COMMAND_LIMIT_REQUEST,
};