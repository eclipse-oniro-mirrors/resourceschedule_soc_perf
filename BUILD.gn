# Copyright (c) 2022 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")
import("//build/ohos/sa_profile/sa_profile.gni")

ohos_sa_profile("socperf_sa_profile") {
  sources = [ "sa_profile/1906.xml" ]
  part_name = "soc_perf"
}

ohos_prebuilt_etc("socperf_resource_config") {
  source = "configs/socperf_resource_config.xml"

  VENDOR_CONFIG_PATH = rebase_path(
          "//vendor/${product_company}/${product_name}/resourceschedule/soc_perf/socperf_resource_config.xml")
  CMD = "if [ -f ${VENDOR_CONFIG_PATH} ]; then echo true; else echo false; fi"

  vendor_config_exist =
      exec_script("//build/lite/run_shell_cmd.py", [ CMD ], "value")
  if (vendor_config_exist) {
    source = VENDOR_CONFIG_PATH
  }

  install_enable = true
  module_install_dir = "etc/socperf"
  part_name = "soc_perf"
  subsystem_name = "resourceschedule"
}
ohos_prebuilt_etc("socperf_boost_config") {
  source = "configs/socperf_boost_config.xml"

  VENDOR_CONFIG_PATH = rebase_path(
          "//vendor/${product_company}/${product_name}/resourceschedule/soc_perf/socperf_boost_config.xml")
  CMD = "if [ -f ${VENDOR_CONFIG_PATH} ]; then echo true; else echo false; fi"

  vendor_config_exist =
      exec_script("//build/lite/run_shell_cmd.py", [ CMD ], "value")
  if (vendor_config_exist) {
    source = VENDOR_CONFIG_PATH
  }

  install_enable = true
  module_install_dir = "etc/socperf"
  part_name = "soc_perf"
  subsystem_name = "resourceschedule"
}
ohos_prebuilt_etc("socperf_power_config") {
  source = "configs/socperf_power_config.xml"

  VENDOR_CONFIG_PATH = rebase_path(
          "//vendor/${product_company}/${product_name}/resourceschedule/soc_perf/socperf_power_config.xml")
  CMD = "if [ -f ${VENDOR_CONFIG_PATH} ]; then echo true; else echo false; fi"

  vendor_config_exist =
      exec_script("//build/lite/run_shell_cmd.py", [ CMD ], "value")
  if (vendor_config_exist) {
    source = VENDOR_CONFIG_PATH
  }

  install_enable = true
  module_install_dir = "etc/socperf"
  part_name = "soc_perf"
  subsystem_name = "resourceschedule"
}
ohos_prebuilt_etc("socperf_thermal_config") {
  source = "configs/socperf_thermal_config.xml"

  VENDOR_CONFIG_PATH = rebase_path(
          "//vendor/${product_company}/${product_name}/resourceschedule/soc_perf/socperf_thermal_config.xml")
  CMD = "if [ -f ${VENDOR_CONFIG_PATH} ]; then echo true; else echo false; fi"

  vendor_config_exist =
      exec_script("//build/lite/run_shell_cmd.py", [ CMD ], "value")
  if (vendor_config_exist) {
    source = VENDOR_CONFIG_PATH
  }

  install_enable = true
  module_install_dir = "etc/socperf"
  part_name = "soc_perf"
  subsystem_name = "resourceschedule"
}
group("socperf_config") {
  deps = [
    ":socperf_boost_config",
    ":socperf_power_config",
    ":socperf_resource_config",
    ":socperf_thermal_config",
  ]
}

ohos_shared_library("socperf_server") {
  sources = [
    "src/core/socperf.cpp",
    "src/core/socperf_handler.cpp",
    "src/server/socperf_server.cpp",
    "src/server/socperf_stub.cpp",
  ]
  include_dirs = [
    "include",
    "include/server",
    "include/core",
  ]
  deps = [
    "//base/hiviewdfx/hilog/interfaces/native/innerkits:libhilog",
    "//foundation/communication/ipc/interfaces/innerkits/ipc_core:ipc_core",
    "//foundation/distributedschedule/safwk/interfaces/innerkits/safwk:system_ability_fwk",
    "//foundation/distributedschedule/samgr/interfaces/innerkits/samgr_proxy:samgr_proxy",
    "//third_party/libxml2:xml2",
    "//utils/native/base:utils",
  ]
  external_deps = [
    "eventhandler:libeventhandler",
    "hitrace_native:hitrace_meter",
  ]
  part_name = "soc_perf"
  subsystem_name = "resourceschedule"
}

config("socperf_client_public_config") {
  include_dirs = [
    "include",
    "include/client",
  ]
}

ohos_shared_library("socperf_client") {
  sources = [
    "src/client/socperf_client.cpp",
    "src/client/socperf_proxy.cpp",
  ]
  include_dirs = [
    "include",
    "include/client",
  ]
  public_configs = [ ":socperf_client_public_config" ]
  deps = [
    "//base/hiviewdfx/hilog/interfaces/native/innerkits:libhilog",
    "//foundation/communication/ipc/interfaces/innerkits/ipc_core:ipc_core",
    "//foundation/distributedschedule/safwk/interfaces/innerkits/safwk:system_ability_fwk",
    "//foundation/distributedschedule/samgr/interfaces/innerkits/samgr_proxy:samgr_proxy",
    "//utils/native/base:utils",
  ]
  part_name = "soc_perf"
  subsystem_name = "resourceschedule"
}

ohos_executable("socperf_test") {
  sources = [ "test/unittest/socperf_test.cpp" ]
  include_dirs = [
    "include",
    "include/client",
  ]
  deps = [
    "//base/hiviewdfx/hilog/interfaces/native/innerkits:libhilog",
    "//foundation/communication/ipc/interfaces/innerkits/ipc_core:ipc_core",
    "//foundation/distributedschedule/safwk/interfaces/innerkits/safwk:system_ability_fwk",
    "//foundation/distributedschedule/samgr/interfaces/innerkits/samgr_proxy:samgr_proxy",
    "//foundation/resourceschedule/resource_schedule_service/soc_perf:socperf_client",
    "//utils/native/base:utils",
  ]
  install_enable = false
  part_name = "soc_perf"
  subsystem_name = "resourceschedule"
}
